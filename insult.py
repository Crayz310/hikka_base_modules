#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://img.icons8.com/color/480/000000/angry--v1.png
# meta developer: @hikarimods

import asyncio
import random

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class PoliteInsultMod(loader.Module):
    """If you need to insult but to be intelligent"""

    strings = {"name": "PoliteInsult"}

    async def on_unload(self):
        asyncio.ensure_future(
            self._client.inline_query("@hikkamods_bot", "#statunload:insult")
        )

    async def stats_task(self):
        await asyncio.sleep(60)
        await self._client.inline_query(
            "@hikkamods_bot",
            f"#statload:{','.join(list(set(self.allmodules._hikari_stats)))}",
        )
        delattr(self.allmodules, "_hikari_stats")
        delattr(self.allmodules, "_hikari_stats_task")

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

        if not hasattr(self.allmodules, "_hikari_stats"):
            self.allmodules._hikari_stats = []

        self.allmodules._hikari_stats += ["insult"]

        if not hasattr(self.allmodules, "_hikari_stats_task"):
            self.allmodules._hikari_stats_task = asyncio.ensure_future(
                self.stats_task()
            )

    async def insultocmd(self, message: Message):
        """Use when angry"""
        adjectives_start = [
            "–≤—Å–ø—ã–ª—å—á–∏–≤—ã–π(-–∞—è)",
            "–Ω–µ–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω—ã–π(-–∞—è)",
            "–æ—Å—Ç–æ—á–µ—Ä—Ç–µ–≤—à–∏–π(-–∞—è) –º–Ω–µ",
            "–≥–ª—É–ø–æ–≤–∞—Ç—ã–π(-–∞—è)",
            "–Ω–∞–¥–º–µ–Ω–Ω—ã–π(-–∞—è)",
            "–Ω–µ–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π(-–∞—è)",
            "–Ω–µ–∏–Ω–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ç–Ω—ã–π(-–∞—è)",
            "–Ω–µ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π(-–∞—è)",
        ]
        nouns = ["—á–µ–ª–æ–≤–µ–∫", "—É—á–∞—Å—Ç–Ω–∏–∫(-—Ü–∞) –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"]
        starts = [
            "–ù–µ —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –ø–æ—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, –Ω–æ",
            "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –º–æ–≥—É —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, –∏ —ç—Ç–æ –º–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–æ",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–∏—Ç—É–∞—Ü–∏—é, —è –º–æ–≥—É –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ. –û–Ω–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ",
            "–ù–µ –ø—ã—Ç–∞—è—Å—å –Ω–∏–∫–æ–≥–æ –æ—Å–æ–∫–æ—Ä–±–∏—Ç—å, –∞ –ª–∏—à—å –≤—ã—Å–∫–∞–∑—ã–≤–∞—è —Å–≤–æ—é —Å–∫—Ä–æ–º–Ω—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ",
            "–ù–µ –ø—Ä–µ—Å–ª–µ–¥—É—è –ø–æ–ø—ã—Ç–∫—É –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–∞, —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ",
        ]
        ends = ["!!!!", "!", "."]
        start = random.choice(starts)
        adjective_start = random.choice(adjectives_start)
        adjective_mid = random.choice(adjectives_start)
        noun = random.choice(nouns)
        end = random.choice(ends)
        insult = (
            (
                f"{start} —Ç—ã - {adjective_start} {adjective_mid}"
                + (" " if adjective_mid else "")
            )
            + noun
        ) + end

        await utils.answer(message, insult)
